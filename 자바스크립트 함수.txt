스코프(scope) : 변수/ 함수 같은 참조 대상 식별자를 찾아내는 규칙

	함수 스코프 :
		함수 내부 : 지역 스코프(함수 내에서 정의한 블록문만 유효 범위로 인정)
 					-> 밖에서 정의한 변수가 함수 내부에서 사용가능

		함수 외부 : 전역 스코프(스코프와 상관 없이 모두 참조)
					-> 함수 내에서 정의한 변수 밖에서 사용 불가능
	
	블록 스코프 :
		ES6에서 추가된 let, const 키워드 변수에 한해서만 적용
		var 변수는 블록 {}에 영향을 받지 않음
		
		*예시
			var a = 10 ;
			{
				var b = 20;
			}
			console.log(a,b) // b 값이 제대로 출력

	* 참조 우선순위 :
		let, const는 같은 스코프 영역에서 중복 선언이 불가능
		
		1. 코드 내에서 같은 식별자로 중복 선언시 같은 지역 스코프의 식별자를 우선 참조
		2. 찾지 못할 경우 전역 스코프에서 참조

함수 호이스팅(hoisting) :

	코드를 선언과 할당으로 분리해 선언부만 자신의 스코프 최상위로 올림
	var, 함수 선언문에 적용(함수 표현식으로 정의될 경우 함수 식별자만 올림)
	let, const에는 적용 X	
	
	*예시
		console.log(num);			var num;
		var num = 10;		=>	console.log(num)	//undefined
						num = 10;	

즉시 실행 함수(IIFE, immediately invoked function expression) :
	
	일반적인 함수는 전역 스코프에 정의되어 프로그램이 종료될 때까지 메모리에서 사라지지 않음
	한 번만 사용할 함수의 경우 전역스코프의 오염이 발생	
	IIFE는 함수를 정의하면서 동시에 실행되고 메모리에 데이터를 남기지 않음
	

	( function(){} )();